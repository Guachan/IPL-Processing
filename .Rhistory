path <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
calibs <- path %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel(path = path, sheet = .x, range = "A5:F15"), .id = "sheet")
path <- read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = sheet)
path <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
View(path)
calibs <- path %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel(path = path, sheet = .x, range = "A5:F15"), .id = "sheet")
patha <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
calibs <- patha %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel(path = patha, sheet = .x, range = "A5:F15"), .id = "sheet")
path <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
calibs <- path %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel(path = "Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A5:F15"), .id = "sheet")
?read_excel
path <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
calibs <- path %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A5:F15"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A5:F15"), .id = "sheet")
View(calibs)
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
View(calibs)
path <- read_excel("Compound Calibration Report_IPLS standards.xlsx")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A34:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x), .id = "sheet")
View(calibs)
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names() %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, skip = 33), .id = "sheet")
?map_df
?set_names
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:4, c("a", "b", "c", "d")) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:4, nm = c("a", "b", "c", "d")) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:4, "a", "b", "c", "d") %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
names <- c("Level", "Std_Amount", "Std_Area")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(names) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:3, names) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "A35:C40"), .id = "sheet")
names <- c("Std_Amount", "Std_Area")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:2, names) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "B35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:2) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "B35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:2, nm = NULL) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "B35:C40"), .id = "sheet")
calibs <- "Compound Calibration Report_IPLS standards.xlsx" %>%
excel_sheets() %>%
set_names(1:2, nm = names) %>%
map_df(~ read_excel("Compound Calibration Report_IPLS standards.xlsx", sheet = .x, range = "B35:C40"), .id = "sheet")
linear_fit <- lm(formula = Std_Area ~ Std_Amount, data = calib_standards, subset = Compound)
linear_fit <- lm(formula = Std_Area ~ Std_Amount, data = calib_standards)
View(linear_fit)
?lm
lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(Std_Area ~ Std_Amount, dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
lin_fit <- function(dat) {
the_fit <- lm(Std_Area ~ Std_Amount, dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
lin_fits_df <- calib_standards %>%
group_by(Compound)
View(lin_fits_df)
lin_fit(calib_standards %>% filter(Compound = ARCHAEOL))
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL"))
?setNames
?t
t(calib_standards)
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
?do
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit())
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
lin_fit <- function(dat) {
the_fit <- glm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope"))
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL"))
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL"))
ggplot(calib_standards, aes(x = Std_Amount, y = Std_Area)) +
geom_point(size = 3) +
geom_smooth(method = "glm", formula = y~x, family = gaussian(link = 'log')) +
scale_color_manual(name = "Fits",
breaks = c("Linear","Exponential"),
values = c("red","blue")) +
facet_wrap(~Compound, scales = 'free')
calib_standards <- rbind.fill(ARCHAEOL_Import, MGDAG_Import, Gly_Cer_Import, DGTS_Import, C16PA_Import, C16PDME_Import, C16PME_Import, C16PE_Import, C16PG_Import, SQDAG_Import, PC_ARCHAEOL_Import, PE_ARCHAEOL_Import, C21_PC_Import, C16_PC_Import, DGDAG_Import, C16_PAF_Import) %>%
filter(!grepl('N/F', Std_Area)) %>%
transform(Std_Area = as.numeric(Std_Area)) %>%
filter(Std_Area >0) %>%  ## Some standards possibly did not inject properly?
data.frame()
lin_fit <- function(dat) {
the_fit <- glm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
}
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
calib_standards <- rbind.fill(ARCHAEOL_Import, MGDAG_Import, Gly_Cer_Import, DGTS_Import, C16PA_Import, C16PDME_Import, C16PME_Import, C16PE_Import, C16PG_Import, SQDAG_Import, PC_ARCHAEOL_Import, PE_ARCHAEOL_Import, C21_PC_Import, C16_PC_Import, DGDAG_Import, C16_PAF_Import) %>%
filter(!grepl('N/F', Std_Area)) %>%
transform(Std_Area = as.numeric(Std_Area)) %>%
filter(Std_Area >0) %>%  ## Some standards possibly did not inject properly?
data.frame()
lin_fit <- function(dat) {
the_fit <- glm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
}
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
lin_fit <- function(dat) {
the_fit <- lm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
}
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
View(lin_fits_df)
View(calib_standards)
summary(calib_standards)
library(tidyverse)
library(tidyverse)
library(latex2exp)
library(readxl)
library(here) # omg, so useful for paths to stuff in your project
install.packages("here")
library(readxl)
library(here) # omg, so useful for paths to stuff in your project
library("broom", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:broom", unload=TRUE)
library(broom) # bring the broom! it's great for working with models
## Testing out different methods for importing data
##import csv files from HPLC computer (Quantitation reports) from working directory
## Can apply whatever filename/dataframe names you want here
OG22_T5_250_0_3_SC_2 <- read_csv("OG22_T5-250-0-3_SC_2.csv")
getwd()
setwd("/Data")
setwd("/Users/rabergj/Rprojects/IPL-Processing/Data")
## Testing out different methods for importing data
##import csv files from HPLC computer (Quantitation reports) from working directory
## Can apply whatever filename/dataframe names you want here
OG22_T5_250_0_3_SC_2 <- read_csv("OG22_T5-250-0-3_SC_2.csv")
setwd(/Users/rabergj/Rprojects/IPL-Processing)
setwd("/Users/rabergj/Rprojects/IPL-Processing")
## Testing out different methods for importing data
##import csv files from HPLC computer (Quantitation reports) from working directory
## Can apply whatever filename/dataframe names you want here
setwd("IPL-Processing/Data")
/Users/rabergj/Rprojects/
## Testing out different methods for importing data
##import csv files from HPLC computer (Quantitation reports) from working directory
## Can apply whatever filename/dataframe names you want here
setwd("/Users/rabergj/Rprojects/IPL-Processing/Data")
OG22_T5_250_0_3_SC_2 <- read_csv("OG22_T5-250-0-3_SC_2.csv")
path <- here("Data", "Compound Calibration Report_IPLS standards.xlsx")
stopifnot(file.exists(path))
# pull out calibrations
calibs <-
data_frame(
sheet_index = 1:2,
# bonus: not necessary for reading the file
sheet_name = excel_sheets(path)[sheet_index],
data = map(sheet_index, ~read_excel(
path, sheet = .x,
range = "B34:C40",
col_types = c("numeric", "numeric")
))
)
# look at the data
calibs # still nested
calibs %>% unnest(data) # unnested
calibs %>% unnest(data) %>% # plotted
filter(!is.na(Std_Area)) %>%
ggplot() + aes(Std_Amount, Std_Area, color = sheet_name) +
geom_smooth(method = "lm") + geom_point(size = 4)
?safely
# using safely to catch problems with the non-linear fit
safe_nls <- safely(nls)
# calibration fit
calib_fits <- calibs %>%
mutate(
lm_fit = map(
data,
~lm(Std_Area ~ Std_Amount, data = .x)
),
lm_summary = map(lm_fit, glance),
lm_coefs = map(lm_fit, tidy),
a = map_dbl(lm_coefs, ~filter(.x, term == "(Intercept)")$estimate),
b = a / map_dbl(lm_coefs, ~filter(.x, term == "Std_Amount")$estimate),
nls_safe_fit = pmap(
list(data = data, a = a, b = b),
function(data, a, b) {
safe_nls(Std_Area ~ a * exp(b * Std_Amount), data = data, start = list(a = a, b = b))
}
),
nls_fit_error = map_chr(
nls_safe_fit,
~if(is.null(.x$error)) {NA_character_} else {.x$error$message}),
nls_fit = map(nls_safe_fit, "result"),
nls_summary = map(nls_fit, ~if(!is.null(.x)) { glance(.x) } else { NULL }),
nls_coefs = map(nls_fit, ~if(!is.null(.x)) { tidy(.x) } else { NULL })
) %>% select(-nls_safe_fit, -a, -b)
# looks like exponential is not a good fit here, even with better starting values
calib_fits
# linear fit summary and coefficients
calib_fits %>% unnest(lm_summary)
calib_fits %>% unnest(lm_coefs)
# use predict to plot calibration fit manually
calib_fits %>%
mutate(lm_predict = map(lm_fit, ~.x$model %>% mutate(Std_Area = predict(.x)))) %>%
ggplot() +
aes(Std_Amount, Std_Area, color = sheet_name) +
geom_line(data = function(df) unnest(df, lm_predict), mapping = aes(linetype = "lm")) +
geom_point(data = function(df) unnest(df, data), size = 4)
ggplot(calib_standards, aes(x = Std_Amount, y = Std_Area)) +
geom_point(size = 3) +
geom_smooth(method = "lm",aes (colour = "Linear"), se = TRUE, size = 1) +
scale_color_manual(name = "Fits",
breaks = c("Linear"),
values = c("blue")) +
stat_smooth(method = "nls", formula = y ~ a*exp(b*x), start = list(a=1,b=1), ## Can't get an exponential function to plot, what values to choose for a and b?
aes(colour = "Exponential")) +
scale_color_manual(name = "Fits",
breaks = c("Linear","Exponential"),
values = c("red","blue")) +
facet_wrap(~Compound, scales = 'free')
## Just the linear model for now
ggplot(calib_standards, aes(x = Std_Amount, y = Std_Area)) +
geom_point(size = 3) +
geom_smooth(method = "lm", formula = y~x, family = gaussian(link = 'log')) +
scale_color_manual(name = "Fits",
breaks = c("Linear","Exponential"),
values = c("red","blue")) +
facet_wrap(~Compound, scales = 'free')
## How to extract linear regression intercept and coef to apply calibrations?
lin_fit <- function(dat) {
the_fit <- lm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
}
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
install.packages("here")
knitr::opts_chunk$set(echo = TRUE)
library(plyr) # recommend not using plyr, dplyr is faster and better implemented
library(tidyverse)
library(ggplot2) # no need to load, part of tidyverse
library(latex2exp)
library(readxl)
library(purrr) # no need to load, part of tidyverse
library(here) # omg, so useful for paths to stuff in your project
library(broom) # bring the broom! it's great for working with models
## Testing out different methods for importing data
##import csv files from HPLC computer (Quantitation reports) from working directory
## Can apply whatever filename/dataframe names you want here
OG22_T5_250_0_3_SC_2 <- read_csv("OG22_T5-250-0-3_SC_2.csv")
# oh oh - absolute paths and a lot of copy/paste code, time for a function :)
# take a look at how the data_frame map combination is implemented below, this would make this a lot easier
OG23_T5_60_0_3_SC_2 <- read_csv("~/R/Processing IPLs/OG23_T5-60-0-3_SC_2.csv")
getwd()
# location of the report
path <- here("Data", "Compound Calibration Report_IPLS standards.xlsx")
?here
?excel_sheets
?safely
knitr::opts_chunk$set(echo = TRUE)
library(plyr) # recommend not using plyr, dplyr is faster and better implemented
library(tidyverse)
library(ggplot2) # no need to load, part of tidyverse
library(latex2exp)
library(readxl)
library(purrr) # no need to load, part of tidyverse
library(here) # omg, so useful for paths to stuff in your project
library(broom) # bring the broom! it's great for working with models
# location of the report
path <- here("Data", "Compound Calibration Report_IPLS standards.xlsx")
stopifnot(file.exists(path))
# pull out calibrations
calibs <-
data_frame(
sheet_index = 1:2,
# bonus: not necessary for reading the file
sheet_name = excel_sheets(path)[sheet_index],
data = map(sheet_index, ~read_excel(
path, sheet = .x,
range = "B34:C40",
col_types = c("numeric", "numeric")
))
)
# look at the data
calibs # still nested
calibs %>% unnest(data) # unnested
calibs %>% unnest(data) %>% # plotted
filter(!is.na(Std_Area)) %>%
ggplot() + aes(Std_Amount, Std_Area, color = sheet_name) +
geom_smooth(method = "lm") + geom_point(size = 4)
nls
?map
data
# using safely to catch problems with the non-linear fit
safe_nls <- safely(nls)
# calibration fit
calib_fits <- calibs %>%
mutate(
lm_fit = map(
data,
~lm(Std_Area ~ Std_Amount, data = .x)
),
lm_summary = map(lm_fit, glance),
lm_coefs = map(lm_fit, tidy),
a = map_dbl(lm_coefs, ~filter(.x, term == "(Intercept)")$estimate),
b = a / map_dbl(lm_coefs, ~filter(.x, term == "Std_Amount")$estimate),
nls_safe_fit = pmap(
list(data = data, a = a, b = b),
function(data, a, b) {
safe_nls(Std_Area ~ a * exp(b * Std_Amount), data = data, start = list(a = a, b = b))
}
),
nls_fit_error = map_chr(
nls_safe_fit,
~if(is.null(.x$error)) {NA_character_} else {.x$error$message}),
nls_fit = map(nls_safe_fit, "result"),
nls_summary = map(nls_fit, ~if(!is.null(.x)) { glance(.x) } else { NULL }),
nls_coefs = map(nls_fit, ~if(!is.null(.x)) { tidy(.x) } else { NULL })
) %>% select(-nls_safe_fit, -a, -b)
# looks like exponential is not a good fit here, even with better starting values
calib_fits
# linear fit summary and coefficients
calib_fits %>% unnest(lm_summary)
calib_fits %>% unnest(lm_coefs)
ggplot(calib_standards, aes(x = Std_Amount, y = Std_Area)) +
geom_point(size = 3) +
geom_smooth(method = "lm",aes (colour = "Linear"), se = TRUE, size = 1) +
scale_color_manual(name = "Fits",
breaks = c("Linear"),
values = c("blue")) +
stat_smooth(method = "nls", formula = y ~ a*exp(b*x), start = list(a=1,b=1), ## Can't get an exponential function to plot, what values to choose for a and b?
aes(colour = "Exponential")) +
scale_color_manual(name = "Fits",
breaks = c("Linear","Exponential"),
values = c("red","blue")) +
facet_wrap(~Compound, scales = 'free')
## Just the linear model for now
ggplot(calib_standards, aes(x = Std_Amount, y = Std_Area)) +
geom_point(size = 3) +
geom_smooth(method = "lm", formula = y~x, family = gaussian(link = 'log')) +
scale_color_manual(name = "Fits",
breaks = c("Linear","Exponential"),
values = c("red","blue")) +
facet_wrap(~Compound, scales = 'free')
## How to extract linear regression intercept and coef to apply calibrations?
lin_fit <- function(dat) {
the_fit <- lm(Std_Area ~ Std_Amount, dat)
setNames(data.frame(t(coef(the_fit))), c("intercept", "slope")) ## Not sure I understand why this works
}
lin_fit(calib_standards %>% filter(Compound == "ARCHAEOL")) ##Test function works on 1 compound
lin_fits_df <- calib_standards %>%
group_by(Compound) %>%
do(lin_fit(.))
std_assignments <- c("Std1", "Std2", "Std1")
names(std_assignments) <- c("Compound_A", "Compound_B", "Compound_C")
std_assignments
std_assignments["Compound_B"]
std_assignments[["Compound_B"]]
std_assignments["Std1"]
std_assignments[["Std1"]]
c(std_assignments, "Compound_D" = "Std5")
std_assignments
c(std_assignments, "Compound_D" = "Std5")
std_assignments_opt2 <- data.frame(c("Compound_A", "Compound_B", "Compound_C"), c("Std1", "Std2", "Std1"))
std_assignments_opt2
std_assignments_opt2 <- data.frame(Compound = c("Compound_A", "Compound_B", "Compound_C"), Standard = c("Std1", "Std2", "Std1"))
std_assignments_opt2
std_assignments_opt2 %>% filter("Compound_B")["Standard"]
std_assignments_opt2 %>% filter(Compound == "Compound_B")["Standard"]
std_assignments_opt2
std_assignments_opt2 %>% filter("Compound" == "Compound_B")["Standard"]
std_assignments_opt2 %>% filter(Compound == "Compound_B")
std_assignments_opt2 %>% filter(Compound == "Compound_B")[2]
std_assignments_opt2 %>% filter(Compound == "Compound_B")
std_assignments_opt2 %>% filter(Compound == "Compound_B")[1,2]
std_assignments_opt2 %>% filter(Compound == "Compound_B")[2,2]
std_assignments_opt2 %>% filter(Compound == "Compound_B")[2,1]
std_assignments_opt2 %>%
filter(std_assignments_opt2, Compound == "Compound_B")[2,1]
filter(std_assignments_opt2, Compound == "Compound_B")[2,1]
filter(std_assignments_opt2, Compound == "Compound_B")[1,2]
type_of(filter(std_assignments_opt2, Compound == "Compound_B")[1,2])
typeof(filter(std_assignments_opt2, Compound == "Compound_B")[1,2])
filter(std_assignments_opt2, Compound == "Compound_B")[1,2]
# linear fit summary and coefficients
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs)
data
t5_28_2
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs)
calib_fits
calib_fits %>% unnest(lm_summary)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs)
calib_fits
calib_fits %>% unnest(lm_summary)
calib_fits %>% unnest(lm_coefs)
calib_fits[lm_coefs]
calib_fits
calib_fits["lm_coefs"]
calib_fits["lm_coefs"][1]
calib_fits["lm_coefs"][2]
calib_fits["lm_coefs"][,1]
calib_fits["lm_coefs"][1,1]
calib_fits["lm_coefs"][1,1][1,1]
calib_fits["lm_coefs"][1,1][1,1][1,1]
unnest(calib_fits, lm_coefs)[1,1]
unnest(calib_fits, lm_coefs)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name = "sheet1ARCHAEOL"
)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "sheet1ARCHAEOL"
)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs
calib_fits
calib_fits
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL"
)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL"
)[1,3]
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL"
)
filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")
filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")["lm_coefs"]
filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")["lm_coefs"] %>% unnest(lm_coefs)
filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")["lm_coefs"] %>% unnest(lm_coefs)["term"]
coefs <- filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")["lm_coefs"] %>% unnest(lm_coefs)
coefs
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL"
)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL",
term == "(Intercept)"
)
calib_fits %>% unnest(lm_summary) %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL",
term == "(Intercept)"
) %>% select(estimate)
coefs
coefs[1,2]
# One way to select the estimate for the intercept of the Archaeol calibration:
calib_fits %>% unnest(lm_coefs) %>% filter(
sheet_name == "Sheet1ARCHAEOL",
term == "(Intercept)"
) %>% select(estimate)
# Another way. Shorter, but requires assigning a new variable
coefs <- filter(calib_fits, sheet_name == "Sheet1ARCHAEOL")["lm_coefs"] %>% unnest(lm_coefs)
coefs[1,2]
